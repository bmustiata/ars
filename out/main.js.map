{"version":3,"sources":["webpack:///webpack/bootstrap ae3633402484be59e81a","webpack:///external \"babel-polyfill\"","webpack:///./src/main.ts","webpack:///external \"fs\"","webpack:///external \"handlebars\"","webpack:///external \"colors\"","webpack:///external \"fs-extra\"","webpack:///external \"path\"","webpack:///external \"child_process\""],"names":[],"mappings":";;;;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;ACtCA,4C;;;;;;;ACA6E;AAClE;AACkE;;AAC7E,KAAc,yBACb;AAAD,KAAsB,iCACrB;AAAD,KAAkB,6BACjB;AAAD,KAAmB,8BAClB;AAAD,KAAgB,2BACf;AAAD,KAAwB,mCAEvB;AAAD,KAAyB,sBAAU,QAAI,IAAoB,sBACpC,QAAI,IAAoB,sBAC3B,KAAK,KAAQ,QAAI,IAAK,MAAc;AAExD,KAAmB,gBAAU,QAAI,IAAc,gBACxB,QAAI,IAAc,gBAChB;AAEoD;AACH;AACG;AAC7E,KAAU,OAAM;AAEZ,MAAC,IAAK,IAAI,GAAG,IAAU,QAAK,KAAO,QAAK,KAAG;AACvC,UAAK,KAAQ,QAAK,KAC1B;AAAC;AAE4E;AAC9B;AAC8B;AAE7E,KAAqB,oBAAO;AAEzB,KAAO,OAAS,SAAE;AACA,yBAAO,KAAM,MAAG,GAAa,aAAO,QAAW;AACzD,aAAI,IAAO,OAAM,uDAAoD,KAAU,UAC1F;AAAC;AAEoE;AAClE,KAAC,CAAK,KAAO,UAAI,CAAmB,mBAAE;AAC9B,aAAI,IAAO,OAAI,IAAiD;AAEhE,aAAK,6BAA6B,OAAK,KAA0B;AACtE,QAAY,YAAqB,qBAC1B,OACC,QAAC,UAAG;AACH,iBAAK,YACd;AAAE;AAEG,aAAK,KAChB;AAAC;AAEmF;AAC3D;AACtB,KAAK,KAAQ,QAAE;AACG,yBAAoB,oBAAoB,oBAAK;AAE7C,uBAAQ,UAAO,KAAG;AAC/B,UAAO,OAAE,GACjB;AAAC;AAE2E;AAC5E,KAAc,WAAoB;AAC9B,MAAQ,QAAC,UAAW,IAAO;AAC3B,SAAO,IAAW,SAAK,KAAI;AAC3B,SAAe,YAAI,EAAG;AACtB,SAAgB,aAAI,EAAG,KAAI,EAAG,KAAO;AAEpB,uBAAW,aAAa;AACvB,+BAAc,SACpC;AAAE;AAEF,KAAiB,cAAoB,kBAAK;AAEmC;AAC9C;AAC8C;AACtE,SAAK,oBAAyB,yBAAa,KAAU,UAAuB;AAEhF,KAAC,CAAO,OAAK,KAAK,KAAoB,qBAAa,aAAa,YAAE;AAC/D,QAAc,cAAO,QAAM,KAAU,UAAmB,oBAC9D;AAAC;AAEY,eAAI,KAAM,KAAK,KAAoB,qBAAe;AAM5D;;;;;AACH,wBAAkC,aAAgB;AAC5C,QAAY,YAAgB,gBAAQ,QAAC,UAAiB;AACpD,aAAK,IAAgB,cAAS,UAAoB;AAElD,aAAiB,gBAAO,KAAK,KAAY,aAAG,EAAO;AACnD,aAAgB,eAAO,KAAK,KAAe,gBAAG,EAAe;AAE1D,aAAS,YAAa,UAAE;AAChB,qBAAI,IAAO,OAAO,OAA0B,4BAAa;AAEpE;AAAC;AAEE,aAAY,YAAe,eAAE;AACzB,iBAAY,YAAgB,gBAAE;AACtB,yBAAI,IAAO,OAAO,OAA0B,4BACvD;AAAM,oBAAE;AACG,yBAAI,IAAO,OAAK,KAA0B,4BAAkB;AACjE,oBAAU,UAChB;AAAC;AAEY,2BAAc,eAAgB;AAE/C;AAAC;AAGE,aAAE,EAAa,gBAAU,OAAgB,gBAAE;AACnC,qBAAI,IAAO,OAAO,OAA0B,4BAAkB;AAEzE;AAAC;AAEE,aAAC,CAAE,EAAa,aAAE;AACd,iBAAC,CAAO,OAAgB,gBAAE;AAClB,yBAAI,IAAO,OAAK,KAA0B,4BAAkB;AAC5D,yBAAS,SAAa,cAAiB;AAGlD;AAAC;AAEE,iBAAG,GAAa,aAAa,cAAU,YAAM,GAAa,aAAc,eAAW,UAAE;AAC7E,yBAAI,IAAO,OAAK,KAA0B,4BAAmB;AAExE;AAAC;AAEqB;AACtB,iBAAqB,qBAAgB,gBAAU;AAExC,qBAAS,SAAc,eAAqB;AAC5C,qBAAS,SAAa,cAAiB;AACnC,yBAAc,eAAe,eAAqB;AAC3D,gBAAW,WAAoB;AAE1B,qBAAI,IAAO,OAAI,IAA0B,4BAAmB;AAGvE;AAAC;AAGD,aAAmB,kBAAK,GAAa,aAAa,cAAU;AAC5D,aAAY,WAAa,WAAQ,QAAiB;AAClD,aAAW,UAAW,SAAmB;AAEtC,aAAC,CAAO,OAAgB,gBAAE;AAClB,qBAAI,IAAO,OAAK,KAA0B,4BAAkB;AACjE,gBAAc,cAAc,eAAS,SAAU;AAGrD;AAAC;AAEE,aAAQ,WAAM,GAAa,aAAc,eAAW,UAAE;AAC9C,qBAAI,IAAO,OAAK,KAA0B,4BAAmB;AAExE;AAAC;AAED,aAAqB,oBAAgB,gBAAU;AAExC,iBAAS,SAAc,eAAqB;AACjD,YAAc,cAAc,eAAS,SAAU;AACtC,qBAAc,eAAe,eAAqB;AAC3D,YAAW,WAAoB;AAE1B,iBAAI,IAAO,OAAI,IAA0B,4BACpD;AACJ;AAAC;AAOE;;;;;;AACH,wBAA+B,UAAmB;AAC9C,SAAY;AACJ,eAAM;AACE,uBAAU;AACV,uBAAO;AACR,sBACb;AALa;AAOf,SAAQ,OAAY;AAEjB,SAAU,UAAK,KAAO,OAAE;AACjB,gBAAa,eAAO;AACtB,gBAAO,KAAU,UAAE,GAAM,KAAO,SAAU,QAClD;AAAC;AAEE,SAAQ,QAAK,KAAO,OAAE;AACf,gBAAY,cAAO;AACrB,gBAAO,KAAU,UAAE,GAAM,KAAO,SAAS,OACjD;AAAC;AAEK,YAAK,OAAa,WAAQ,QAAM,MAAoB;AAEpD,YACV;AAAC;AAME;;;;;AACH,sBAAyB;AACrB,SAAK;AACK,gBAAG,GAAS,SAAM,MAC5B;AAAE,OAAM,OAAG,GAAE;AACH,gBACV;AACJ;AAAC;AAME;;;;;AACH,iBAAoB;AAChB,SAAK;AACK,gBAAG,GAAS,SAAM,MAC5B;AAAE,OAAM,OAAG,GAAE;AACH,gBACV;AACJ;AAAC;AAQE;;;;;;;AACH,sBAAgC,aAAO,OAAO;AAC9B,kBACR,SAAc,sBAAU,kBAAc,cACtC,EAAM,OAAC,CAAE,GAAE,GACnB;AAAC,E;;;;;;AClPD,gC;;;;;;ACAA,wC;;;;;;ACAA,oC;;;;;;ACAA,sC;;;;;;ACAA,kC;;;;;;ACAA,2C","file":"out/main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ae3633402484be59e81a","module.exports = require(\"babel-polyfill\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"babel-polyfill\"\n// module id = 1\n// module chunks = 0","// ==========================================================================\n// Requires\n// ==========================================================================\nimport * as fs from \"fs\"\nimport * as handlebars from \"handlebars\"\nimport * as colors from \"colors\"\nimport * as fsExtra from \"fs-extra\"\nimport * as path from \"path\"\nimport * as childProcess from \"child_process\"\n\nconst ARS_PROJECTS_FOLDER = process.env.ARS_PROJECTS_FOLDER ?\n                process.env.ARS_PROJECTS_FOLDER :\n                path.join(process.env.HOME, \".projects\")\n\nconst ARS_DIFF_TOOL = process.env.ARS_DIFF_TOOL ?\n                process.env.ARS_DIFF_TOOL :\n                'vimdiff'\n\n// ==========================================================================\n// Parse the projectName, and projectParameters from the program arguments\n// ==========================================================================\nconst args = [];\n\nfor (var i = 2; i < process.argv.length; i++) {\n    args.push(process.argv[i]);\n}\n\n// ==========================================================================\n// Read previous settings if they are available\n// ==========================================================================\n\nlet projectParameters = null\n\nif (isFile(\".ars\")) {\n    projectParameters = JSON.parse(fs.readFileSync(\".ars\", \"utf-8\"))\n    console.log(colors.cyan(`Using already existing '.ars' file settings: ${JSON.stringify(projectParameters)}`))\n}\n\n// we don't have project parameters, nor default settins, bailing out\nif (!args.length && !projectParameters) {\n    console.log(colors.red(\"You need to pass a project name to generate.\"))\n\n    console.log(`Available projects (${colors.cyan(ARS_PROJECTS_FOLDER)}):`)\n    fs.readdirSync(ARS_PROJECTS_FOLDER)\n      .sort()\n      .forEach((it) => {\n        console.log(` * ${it}`)\n      })\n\n    process.exit(1)\n}\n\n// if we have arguments, we need to either create, or augument the projectParameters\n// with the new settings.\nif (args.length) {\n    projectParameters = projectParameters ? projectParameters : {}\n\n    projectParameters['NAME'] = args[0]\n    args.splice(0, 1)\n}\n\n// we iterate the rest of the parameters, and augument the projectParameters\nconst PARAM_RE = /^(.*?)(=(.*))?$/\nargs.forEach(function(it, index) {\n    const m = PARAM_RE.exec(it)\n    const paramName = m[1]\n    const paramValue = m[3] ? m[3] : true\n\n    projectParameters[paramName] = paramValue\n    projectParameters[`arg${index}`] = paramName\n})\n\nconst projectName = projectParameters.NAME\n\n// ==========================================================================\n// Generate the actual project.\n// ==========================================================================\nconsole.log(`Generating ${projectName} with ${JSON.stringify(projectParameters)}.`)\n\nif (!isFile(path.join(ARS_PROJECTS_FOLDER, projectName, \".noars\"))) {\n    fs.writeFileSync(\".ars\", JSON.stringify(projectParameters), \"utf-8\")\n}\n\nprocessFolder(\".\", path.join(ARS_PROJECTS_FOLDER, projectName))\n\n/**\n * Recursively process the handlebars templates for the given project.\n * @param {string} currentPath\n * @param {string} fullFolderPath\n */\nfunction processFolder(currentPath, fullFolderPath) {\n    fs.readdirSync(fullFolderPath).forEach(function(fileName) {\n        let f = parseFileName(fileName, projectParameters)\n\n        let fullLocalPath = path.join(currentPath, f.name);\n        let fullFilePath = path.join(fullFolderPath, f.originalName);\n\n        if (fileName == \".noars\") {\n            console.log(colors.yellow(\"Ignoring file        : \" + \".noars\"))\n            return\n        }\n\n        if (isDirectory(fullFilePath)) {\n            if (isDirectory(fullLocalPath)) {\n                console.log(colors.yellow(\"Already exists folder: \" + fullLocalPath));\n            } else {\n                console.log(colors.cyan(\"Creating folder      : \" + fullLocalPath))\n                fs.mkdirSync(fullLocalPath);\n            }\n\n            processFolder(fullLocalPath, fullFilePath);\n            return;\n        }\n\n\n        if (f.keepExisting && isFile(fullLocalPath)) {\n            console.log(colors.yellow(\"Keeping regular file : \" + fullLocalPath))\n            return;\n        }\n\n        if (!f.hbsTemplate) {\n            if (!isFile(fullLocalPath)) {\n                console.log(colors.cyan(\"Copying regular file : \" + fullLocalPath))\n                fsExtra.copySync(fullFilePath, fullLocalPath);\n\n                return;\n            }\n\n            if (fs.readFileSync(fullFilePath, \"utf-8\") == fs.readFileSync(fullLocalPath, \"utf-8\")) {\n                console.log(colors.cyan(\"No update needed     : \" + fullLocalPath));\n                return;\n            }\n\n            // we have a conflict.\n            let fullLocalPathOrig = fullLocalPath + \".orig\"\n\n            fsExtra.copySync(fullLocalPath, fullLocalPathOrig);\n            fsExtra.copySync(fullFilePath, fullLocalPath);\n            executeDiff(ARS_DIFF_TOOL, fullLocalPath, fullLocalPathOrig);\n            fs.unlinkSync(fullLocalPathOrig);\n\n            console.log(colors.red(\"Conflict resolved    : \" + fullLocalPath));\n\n            return;\n        }\n\n\n        let templateContent = fs.readFileSync(fullFilePath, \"utf-8\")\n        let template = handlebars.compile(templateContent)\n        let content = template(projectParameters)\n\n        if (!isFile(fullLocalPath)) {\n            console.log(colors.cyan(\"Parsing HBS template : \" + fullLocalPath))\n            fs.writeFileSync(fullLocalPath, content, \"utf-8\")\n\n            return;\n        }\n\n        if (content == fs.readFileSync(fullLocalPath, \"utf-8\")) {\n            console.log(colors.cyan(\"No update needed     : \" + fullLocalPath));\n            return;\n        }\n\n        let fullLocalPathOrig = fullLocalPath + \".orig\"\n\n        fsExtra.copySync(fullLocalPath, fullLocalPathOrig);\n        fs.writeFileSync(fullLocalPath, content, \"utf-8\")\n        executeDiff(ARS_DIFF_TOOL, fullLocalPath, fullLocalPathOrig);\n        fs.unlinkSync(fullLocalPathOrig);\n\n        console.log(colors.red(\"Conflict resolved HBS: \" + fullLocalPath));\n    });\n}\n\n/**\n * parseFileName - Parse the file name\n * @param {string} fileName\n * @param {any} projectParameters\n * @return {Object}\n */\nfunction parseFileName(fileName, projectParameters) {\n    const result = {\n        name: null,\n        originalName: fileName,\n        keepExisting: false,\n        hbsTemplate: false\n    };\n\n    let name = fileName;\n\n    if (/\\.KEEP$/.test(name)) {\n        result.keepExisting = true\n        name = name.substring(0, name.length - \".KEEP\".length)\n    }\n\n    if (/\\.hbs/.test(name)) {\n        result.hbsTemplate = true\n        name = name.substring(0, name.length - \".hbs\".length)\n    }\n\n    result.name = handlebars.compile(name)(projectParameters);\n\n    return result;\n}\n\n/**\n * isDirectory - Checks if the given file path is a directory.\n * @param {string} name\n * @return {boolean}\n */\nfunction isDirectory(name) {\n    try {\n        return fs.statSync(name).isDirectory();\n    } catch (e) {\n        return false;\n    }\n}\n\n/**\n * isFile - Checks if the given file path is an existing file\n * @param {string} name\n * @return {boolean}\n */\nfunction isFile(name) {\n    try {\n        return fs.statSync(name).isFile();\n    } catch (e) {\n        return false;\n    }\n}\n\n/**\n * executeDiff - Execute the given diff process.\n * @param {string} diff program name\n * @param {string} file1 first file to diff\n * @param {string} file2 second file do diff\n * @return {void}\n */\nfunction executeDiff(processName, file1, file2) {\n    childProcess.execSync(\n        `${processName} \"${file1}\" \"${file2}\"`,\n        {stdio:[0,1,2]});\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","module.exports = require(\"fs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fs\"\n// module id = 3\n// module chunks = 0","module.exports = require(\"handlebars\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"handlebars\"\n// module id = 4\n// module chunks = 0","module.exports = require(\"colors\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"colors\"\n// module id = 5\n// module chunks = 0","module.exports = require(\"fs-extra\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fs-extra\"\n// module id = 6\n// module chunks = 0","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 7\n// module chunks = 0","module.exports = require(\"child_process\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"child_process\"\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}